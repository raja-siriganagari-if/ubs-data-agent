mappings:
  efx_to_ibdl:
    source: 'EFX'
    target: 'IBDL'
    paths:
      efx_data: "/data/processed_efx_*.csv"
      ibdl_data: "/data/IBDL_*.csv"
      output: /data/matches.json

    id_columns:
      - orderIntId
      - buySellIndicator
      - eventType
      - datetime
      - instrumentId
    
    sourceTimeStampCol: "datetime_epoch"

    rules:
      orderIntId: |-
        def orderIntIdRule(row):
          if row['instrumentType'] == 'SWAP':
            return str(row['orderId']) + '_' + str(int(row['legId'])+1)
          elif row['instrumentType'] == 'BLOCK':
            comp = ''
            if row['directionMatchesRequest'] == False:
              comp = 's' if row['blockLegSide'] == 'BUY' else 'b'
            else:
              comp = 'b' if row['blockLegSide'] == 'BUY' else 's'
            orderIntId = '_'.join([str(x) for x in [row['orderId'], comp, row['legId'], row['allocationId'], row['quoteId']]])
            return orderIntId
          else:
            return str(row['orderId'])

      datetime: |-
        def datetimeRule(row):
          return int(row['datetime_epoch'])

      eventType: |-
        def eventTypeRule(row):
          eventType = str(row['eventType'])
          eventTypeTransformations = {
            "NEW": "NEWO",
            "CONFIRMED": "CONF",
            "CANCELLED": "CAMO",
            "REJECTED": "REMO",
            "TRADE": "FILL",
            "TRADE_ACK": "PARF"
          }
          return eventTypeTransformations[eventType] if eventType in eventTypeTransformations else ""

      instrumentId: |-
        def instrumentIdRule(row):
          fxpm = "PM" if str(row['sym'])[1:3] in ["AU", "AG", "PT", "PD"] else "FX"
          symclean2 = 'X' + str(row['sym'])[1:] if fxpm == "PM" else str(row['sym'])
          spotSettlementDate = str(row['spotSettlementDate'])
          legSettlementDate = str(row['legSettlementDate'])
          third_comp = legSettlementDate.replace('-', '') if not spotSettlementDate or spotSettlementDate == "None" else spotSettlementDate.replace('-', '')
          return fxpm + 'SPOT' + symclean2 + third_comp

      buySellIndicator: |-
        def buySellIndicatorRule(row):
          sym = str(row['sym'])
          fxpm = "PM" if str(row['sym'])[1:3] in ["AU", "AG", "PT", "PD"] else "FX"
          currOrder = ''
          if ord(sym[:1]) < ord(sym[3:4]):
            currOrder = 'left'
          elif ord(sym[:1]) > ord(sym[3:4]):
            currOrder = 'right'
          else:
            if ord(sym[1:2]) < ord(sym[4:5]):
              currOrder = 'left'
            elif ord(sym[1:2]) > ord(sym[4:5]):
              currOrder = 'right'
            else:
              if ord(sym[2:3]) < ord(sym[5:6]):
                currOrder = 'left'
              elif ord(sym[2:3]) > ord(sym[5:6]):
                currOrder = 'right'
              else:
                currOrder = 'equal'
          
          # logger.debug(f"sym, fxpm, currOrder: {sym}, {fxpm}, {currOrder}")
              
          flip_ini = -1
          if fxpm == "FX":
            if (currOrder == "left" and str(row['quantityUnit']) == "BASE") or (currOrder == "right" and str(row['quantityUnit']) == "COUNTER"):
              flip_ini =  1
            else:
              flip_ini = 0
          else:
            flip_ini = 1

          # logger.debug(f"flip_ini: {flip_ini}")

          side_modified1 = ''

          side = str(row['side'])

          if side == "BUY":
            side_modified1 = "BUYI"
          elif side == "SELL":
            side_modified1 = "SELL"
          else:
            side_modified1 = ""
          
          # logger.debug(f"side_modifed1: {side_modified1}")

          flip = -1
          if str(row['instrumentType']) == 'SWAP':
            if int(row['legId']) % 2 == 0:
              flip = 1 - flip_ini
            else:
              flip = flip_ini
          else:
            flip = flip_ini

          # logger.debug(f"flip: {flip}")

          side_modified = ''
          if flip == 1:
            if side_modified1 == "BUYI":
              side_modified = "SELL"
            elif side_modified1 == "SELL":
              side_modified == "BUYI"
            else:
              side_modified = ""
          else:
            side_modified = side_modified1
          
          # logger.debug(f"side_modifed value: {side_modified}")
          return side_modified
          